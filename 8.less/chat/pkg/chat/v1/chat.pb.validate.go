// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/v1/chat.proto

package chat_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Session) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SessionMultiError, or nil if none found.
func (m *Session) ValidateAll() error {
	return m.validate(true)
}

func (m *Session) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	if len(errors) > 0 {
		return SessionMultiError(errors)
	}

	return nil
}

// SessionMultiError is an error wrapping multiple validation errors returned
// by Session.ValidateAll() if the designated constraints aren't met.
type SessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionMultiError) AllErrors() []error { return m }

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

// Validate checks the field values on Chat with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Chat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChatMultiError, or nil if none found.
func (m *Chat) ValidateAll() error {
	return m.validate(true)
}

func (m *Chat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for HistorySize

	if all {
		switch v := interface{}(m.GetTtl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatValidationError{
				field:  "Ttl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReadOnly

	// no validation rules for Private

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return ChatMultiError(errors)
	}

	return nil
}

// ChatMultiError is an error wrapping multiple validation errors returned by
// Chat.ValidateAll() if the designated constraints aren't met.
type ChatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMultiError) AllErrors() []error { return m }

// ChatValidationError is the validation error returned by Chat.Validate if the
// designated constraints aren't met.
type ChatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatValidationError) ErrorName() string { return "ChatValidationError" }

// Error satisfies the builtin error interface
func (e ChatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatValidationError{}

// Validate checks the field values on CreateChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatRequestMultiError, or nil if none found.
func (m *CreateChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HistorySize

	// no validation rules for TtlSeconds

	// no validation rules for ReadOnly

	// no validation rules for Private

	if len(errors) > 0 {
		return CreateChatRequestMultiError(errors)
	}

	return nil
}

// CreateChatRequestMultiError is an error wrapping multiple validation errors
// returned by CreateChatRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatRequestMultiError) AllErrors() []error { return m }

// CreateChatRequestValidationError is the validation error returned by
// CreateChatRequest.Validate if the designated constraints aren't met.
type CreateChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatRequestValidationError) ErrorName() string {
	return "CreateChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatRequestValidationError{}

// Validate checks the field values on DeleteChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChatRequestMultiError, or nil if none found.
func (m *DeleteChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	if len(errors) > 0 {
		return DeleteChatRequestMultiError(errors)
	}

	return nil
}

// DeleteChatRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteChatRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChatRequestMultiError) AllErrors() []error { return m }

// DeleteChatRequestValidationError is the validation error returned by
// DeleteChatRequest.Validate if the designated constraints aren't met.
type DeleteChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChatRequestValidationError) ErrorName() string {
	return "DeleteChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChatRequestValidationError{}

// Validate checks the field values on SetChatTTLRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetChatTTLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetChatTTLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetChatTTLRequestMultiError, or nil if none found.
func (m *SetChatTTLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetChatTTLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	// no validation rules for TtlSeconds

	if len(errors) > 0 {
		return SetChatTTLRequestMultiError(errors)
	}

	return nil
}

// SetChatTTLRequestMultiError is an error wrapping multiple validation errors
// returned by SetChatTTLRequest.ValidateAll() if the designated constraints
// aren't met.
type SetChatTTLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetChatTTLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetChatTTLRequestMultiError) AllErrors() []error { return m }

// SetChatTTLRequestValidationError is the validation error returned by
// SetChatTTLRequest.Validate if the designated constraints aren't met.
type SetChatTTLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetChatTTLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetChatTTLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetChatTTLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetChatTTLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetChatTTLRequestValidationError) ErrorName() string {
	return "SetChatTTLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetChatTTLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetChatTTLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetChatTTLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetChatTTLRequestValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ChatId

	// no validation rules for SessionId

	// no validation rules for Text

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageRequestMultiError, or nil if none found.
func (m *SendMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	// no validation rules for Text

	if len(errors) > 0 {
		return SendMessageRequestMultiError(errors)
	}

	return nil
}

// SendMessageRequestMultiError is an error wrapping multiple validation errors
// returned by SendMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageRequestMultiError) AllErrors() []error { return m }

// SendMessageRequestValidationError is the validation error returned by
// SendMessageRequest.Validate if the designated constraints aren't met.
type SendMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRequestValidationError) ErrorName() string {
	return "SendMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRequestValidationError{}

// Validate checks the field values on GetChatHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChatHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatHistoryRequestMultiError, or nil if none found.
func (m *GetChatHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	if len(errors) > 0 {
		return GetChatHistoryRequestMultiError(errors)
	}

	return nil
}

// GetChatHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetChatHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChatHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatHistoryRequestMultiError) AllErrors() []error { return m }

// GetChatHistoryRequestValidationError is the validation error returned by
// GetChatHistoryRequest.Validate if the designated constraints aren't met.
type GetChatHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatHistoryRequestValidationError) ErrorName() string {
	return "GetChatHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChatHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatHistoryRequestValidationError{}

// Validate checks the field values on ChatHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatHistoryMultiError, or
// nil if none found.
func (m *ChatHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatHistoryValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatHistoryValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatHistoryValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatHistoryMultiError(errors)
	}

	return nil
}

// ChatHistoryMultiError is an error wrapping multiple validation errors
// returned by ChatHistory.ValidateAll() if the designated constraints aren't met.
type ChatHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatHistoryMultiError) AllErrors() []error { return m }

// ChatHistoryValidationError is the validation error returned by
// ChatHistory.Validate if the designated constraints aren't met.
type ChatHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatHistoryValidationError) ErrorName() string { return "ChatHistoryValidationError" }

// Error satisfies the builtin error interface
func (e ChatHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatHistoryValidationError{}

// Validate checks the field values on RequestChatAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestChatAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestChatAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestChatAccessRequestMultiError, or nil if none found.
func (m *RequestChatAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestChatAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	if len(errors) > 0 {
		return RequestChatAccessRequestMultiError(errors)
	}

	return nil
}

// RequestChatAccessRequestMultiError is an error wrapping multiple validation
// errors returned by RequestChatAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestChatAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestChatAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestChatAccessRequestMultiError) AllErrors() []error { return m }

// RequestChatAccessRequestValidationError is the validation error returned by
// RequestChatAccessRequest.Validate if the designated constraints aren't met.
type RequestChatAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestChatAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestChatAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestChatAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestChatAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestChatAccessRequestValidationError) ErrorName() string {
	return "RequestChatAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestChatAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestChatAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestChatAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestChatAccessRequestValidationError{}

// Validate checks the field values on RequestChatAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestChatAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestChatAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestChatAccessResponseMultiError, or nil if none found.
func (m *RequestChatAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestChatAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return RequestChatAccessResponseMultiError(errors)
	}

	return nil
}

// RequestChatAccessResponseMultiError is an error wrapping multiple validation
// errors returned by RequestChatAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type RequestChatAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestChatAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestChatAccessResponseMultiError) AllErrors() []error { return m }

// RequestChatAccessResponseValidationError is the validation error returned by
// RequestChatAccessResponse.Validate if the designated constraints aren't met.
type RequestChatAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestChatAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestChatAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestChatAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestChatAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestChatAccessResponseValidationError) ErrorName() string {
	return "RequestChatAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestChatAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestChatAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestChatAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestChatAccessResponseValidationError{}

// Validate checks the field values on GetAccessRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessRequestsRequestMultiError, or nil if none found.
func (m *GetAccessRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	if len(errors) > 0 {
		return GetAccessRequestsRequestMultiError(errors)
	}

	return nil
}

// GetAccessRequestsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccessRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccessRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessRequestsRequestMultiError) AllErrors() []error { return m }

// GetAccessRequestsRequestValidationError is the validation error returned by
// GetAccessRequestsRequest.Validate if the designated constraints aren't met.
type GetAccessRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessRequestsRequestValidationError) ErrorName() string {
	return "GetAccessRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessRequestsRequestValidationError{}

// Validate checks the field values on AccessRequestList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccessRequestList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRequestList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRequestListMultiError, or nil if none found.
func (m *AccessRequestList) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRequestList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessRequestListValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessRequestListValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessRequestListValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccessRequestListMultiError(errors)
	}

	return nil
}

// AccessRequestListMultiError is an error wrapping multiple validation errors
// returned by AccessRequestList.ValidateAll() if the designated constraints
// aren't met.
type AccessRequestListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRequestListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRequestListMultiError) AllErrors() []error { return m }

// AccessRequestListValidationError is the validation error returned by
// AccessRequestList.Validate if the designated constraints aren't met.
type AccessRequestListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRequestListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRequestListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRequestListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRequestListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRequestListValidationError) ErrorName() string {
	return "AccessRequestListValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRequestListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRequestList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRequestListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRequestListValidationError{}

// Validate checks the field values on GrantChatAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantChatAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantChatAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantChatAccessRequestMultiError, or nil if none found.
func (m *GrantChatAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantChatAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	// no validation rules for SessionId

	if len(errors) > 0 {
		return GrantChatAccessRequestMultiError(errors)
	}

	return nil
}

// GrantChatAccessRequestMultiError is an error wrapping multiple validation
// errors returned by GrantChatAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type GrantChatAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantChatAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantChatAccessRequestMultiError) AllErrors() []error { return m }

// GrantChatAccessRequestValidationError is the validation error returned by
// GrantChatAccessRequest.Validate if the designated constraints aren't met.
type GrantChatAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantChatAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantChatAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantChatAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantChatAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantChatAccessRequestValidationError) ErrorName() string {
	return "GrantChatAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantChatAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantChatAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantChatAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantChatAccessRequestValidationError{}

// Validate checks the field values on GrantChatAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantChatAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantChatAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantChatAccessResponseMultiError, or nil if none found.
func (m *GrantChatAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantChatAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GrantChatAccessResponseMultiError(errors)
	}

	return nil
}

// GrantChatAccessResponseMultiError is an error wrapping multiple validation
// errors returned by GrantChatAccessResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantChatAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantChatAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantChatAccessResponseMultiError) AllErrors() []error { return m }

// GrantChatAccessResponseValidationError is the validation error returned by
// GrantChatAccessResponse.Validate if the designated constraints aren't met.
type GrantChatAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantChatAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantChatAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantChatAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantChatAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantChatAccessResponseValidationError) ErrorName() string {
	return "GrantChatAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantChatAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantChatAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantChatAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantChatAccessResponseValidationError{}
